---
layout: chapter
title: Running C in Ruby
---

## Compiling ##

Compiling C code to be loaded as a Ruby extension requires some fancy compiler
options. Luckily, Ruby provides a means of easily generating a Makefile
containing the required options. First create the file `extconf.rb` in the same
directory as your C code:

{% highlight ruby %}
{% include ext/extconf.rb %}
{% endhighlight %}

The preparation section should perform actions similar to the standard UNIX
[`configure` script][conf] e.g.

* Check features of the current platform
* Check for existence of required libraries and functions
* Create any source files that are automatically generated

[conf]: http://en.wikipedia.org/wiki/Configure_script

For example, an extension which uses SDL2 and needs to know how big `int`s are
might call:

{% highlight ruby %}
{% include ext/exex.rb %}
{% endhighlight %}

Calling `create_header` then creates the file `extconf.h` containing
preprocessor definitions based on the results of the prior `mkmf` functions. For
this example, `extconf.h` might contain

{% highlight c %}
{% include ext/exh.h %}
{% endhighlight %}

This header should be included in your C files so that you can adapt your code
to a variety of platforms. Note that you can and should abort the `extconf.rb`
script if a `mkmf` function returns a value that indicates that the build will
fail. For example, if SDL2 is a _requirement_ of your extension you should exit
with some meaningful error message if `have_library('SDL2')` returns `false`.
This is preferred to just generating the Makefile anyway and leaving the user
with an opaque compiler error.

`create_makefile` obviously creates the Makefile, but its argument is especially
important as it defines the entry point of your C code and the name of the
resulting library. The argument essentially defines the name of your extension.

All of the `mkmf` functions and their options are well-documented
[online][mkmf]. Note that in addition to the functions for generating
`extconf.h`, there are a variety of functions for handling different source file
layouts, different file dependencies, etc.

[mkmf]: http://www.ruby-doc.org/stdlib/libdoc/mkmf/rdoc/MakeMakefile.html
